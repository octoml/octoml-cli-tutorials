#!/bin/bash
set -eu

MODEL_NAME=$1
PROJECT_ID=$2
DOCKER_IMAGE_TAG=$3
CLUSTER_NAME=$4
REGION=$5

REGISTRY_URL="${REGION}-docker.pkg.dev/${PROJECT_ID}"
registry="${REGISTRY_URL}/${MODEL_NAME}/${MODEL_NAME}"

# Create artifact registry repository for $MODEL_NAME if it doesn't already exist
if ! gcloud artifacts repositories describe "$MODEL_NAME" --project "$PROJECT_ID" --location "$REGION"; then
    gcloud artifacts repositories create "$MODEL_NAME" --repository-format=docker \
        --location="$REGION" --description="Docker repository for $MODEL_NAME" --project "$PROJECT_ID"
fi

# Docker login with gcloud auth command:
gcloud auth print-access-token --project "$PROJECT_ID" | docker login --username oauth2accesstoken --password-stdin "${REGION}-docker.pkg.dev"

# Get image name from container generated by cli package + Tag the local image with its corresponding repository hostname
docker tag "${MODEL_NAME}:latest" "${registry}:${DOCKER_IMAGE_TAG}"

# Check if image tag exists
if ! gcloud artifacts tags list --package "$MODEL_NAME" --repository "$MODEL_NAME" --project "$PROJECT_ID" --location "$REGION" --filter "$DOCKER_IMAGE_TAG" | grep "$DOCKER_IMAGE_TAG"; then
    docker push "${registry}:${DOCKER_IMAGE_TAG}"
fi

# Confirm that image got pushed
gcloud artifacts packages list --repository "$MODEL_NAME" --project "$PROJECT_ID" --location "$REGION" | grep "$MODEL_NAME"

# Set kubectl context to gke project
zone=$(gcloud container clusters list --project "$PROJECT_ID" | grep "$CLUSTER_NAME" | cut -d' ' -f 3)
gcloud container clusters get-credentials "$CLUSTER_NAME" --project "$PROJECT_ID" --zone "$zone"

cat << EOF > "values-${MODEL_NAME}.yaml"
imageName: $registry
imageTag: $DOCKER_IMAGE_TAG

imageCredentials:
  registry: $registry
  username: oauth2accesstoken
  password: $(gcloud auth print-access-token)
EOF

# Install helm chart to the cluster via helm
if ! helm repo list | grep octoml-cli-tutorials; then
  helm repo add octoml-cli-tutorials https://octoml.github.io/octoml-cli-tutorials
fi

helm repo update octoml-cli-tutorials

helm install "$MODEL_NAME" octoml-cli-tutorials/demo -n "$MODEL_NAME" --create-namespace --values "values-${MODEL_NAME}.yaml" --atomic --timeout 7m

rm "values-$MODEL_NAME.yaml"

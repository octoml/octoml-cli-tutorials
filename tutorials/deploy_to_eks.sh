#!/bin/bash
set -eux

MODEL_NAME=$1
SANDBOX_DEV_PROFILE=$2
DOCKER_IMAGE_TAG=$3
AWS_REGISTRY_URL=$4
AWS_CLUSTER_NAME=$5
REGION=$6


# Docker login with AWS command:
aws ecr get-login-password --profile $SANDBOX_DEV_PROFILE --region $REGION | docker login --username AWS --password-stdin $AWS_REGISTRY_URL

# Get image name from container generated by cli package + Tag the local image with its corresponding repository hostname
docker tag triton:latest $AWS_REGISTRY_URL/$MODEL_NAME:$DOCKER_IMAGE_TAG

# Create ECR registry for $MODEL_NAME if it doesn't already exist
set +e
aws ecr describe-repositories --repository-names $MODEL_NAME --region $REGION --profile $SANDBOX_DEV_PROFILE 2>&1 > /dev/null
status=$?
set -e
if [[ ! "${status}" -eq 0 ]]; then
    aws ecr create-repository --repository-name $MODEL_NAME --region $REGION \
	    --profile $SANDBOX_DEV_PROFILE
fi


# Push docker image to ECR
docker push $AWS_REGISTRY_URL/$MODEL_NAME:$DOCKER_IMAGE_TAG

# Confirm that image got pushed
aws ecr list-images --repository-name $MODEL_NAME --region $REGION --profile $SANDBOX_DEV_PROFILE

# Set kubectl context to aws eks project
aws eks update-kubeconfig --name $AWS_CLUSTER_NAME --region $REGION --profile $SANDBOX_DEV_PROFILE

# Create Kubernetes namespace for `demo` if it doesn't already exist
set +e
kubectl create namespace demo
set -e

# Install helm chart to the EKS cluster via helm
helm install demo ./helm_chart \
	--set image.tag=$MODEL_NAME:$DOCKER_IMAGE_TAG \
	--set image.repository=$AWS_REGISTRY_URL \
        --timeout 5m0s --wait --atomic

# port forward
kubectl port-forward service/demo -n demo 8080:80

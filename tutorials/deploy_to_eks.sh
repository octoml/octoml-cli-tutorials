#!/bin/bash
set -eu

MODEL_NAME=$1
SANDBOX_DEV_PROFILE=$2
DOCKER_IMAGE_TAG=$3
AWS_REGISTRY_URL=$4
AWS_CLUSTER_NAME=$5
REGION=$6

registry="${AWS_REGISTRY_URL}/${MODEL_NAME}"

# Docker login with AWS command:
aws ecr get-login-password --profile "$SANDBOX_DEV_PROFILE" --region "$REGION" | docker login --username AWS --password-stdin "$AWS_REGISTRY_URL"

# Get image name from container generated by cli package + Tag the local image with its corresponding repository hostname
docker tag "${MODEL_NAME}:latest" "${registry}:${DOCKER_IMAGE_TAG}"

# Create ECR registry for $MODEL_NAME if it doesn't already exist
if ! aws ecr describe-repositories --repository-names "$MODEL_NAME" --region "$REGION" --profile "$SANDBOX_DEV_PROFILE"; then
    aws ecr create-repository --repository-name "$MODEL_NAME" --region "$REGION" \
	    --profile "$SANDBOX_DEV_PROFILE"
fi

# Check if image tag exists
if ! aws ecr list-images --repository-name "$MODEL_NAME" --region "$REGION" --profile "$SANDBOX_DEV_PROFILE" | grep "$DOCKER_IMAGE_TAG"; then
  # Push docker image to ECR
  docker push "${registry}:${DOCKER_IMAGE_TAG}"
fi

# Confirm that image got pushed
aws ecr list-images --repository-name "$MODEL_NAME" --region "$REGION" --profile "$SANDBOX_DEV_PROFILE" | grep "$DOCKER_IMAGE_TAG"

# Set kubectl context to aws eks project
aws eks update-kubeconfig --name "$AWS_CLUSTER_NAME" --region "$REGION" --profile "$SANDBOX_DEV_PROFILE"

cat << EOF > "values-${MODEL_NAME}.yaml"
imageName: $registry
imageTag: $DOCKER_IMAGE_TAG

imageCredentials:
  registry: $registry
  username: AWS
  password: $(aws ecr get-login-password --profile "$SANDBOX_DEV_PROFILE" --region "$REGION")


tolerations:
 - key: "octoml.ai/octomizer-platform"
   operator: "Equal"
   value: "aws-c6g.large"
   effect: "NoSchedule"

nodeSelector:
  octoml.ai/octomizer-platform: "aws-c6g.large"
EOF

# Install helm chart to the EKS cluster via helm
if ! helm repo list | grep octoml-cli-tutorials; then
  helm repo add octoml-cli-tutorials https://octoml.github.io/octoml-cli-tutorials
fi

helm repo update octoml-cli-tutorials

helm install "$MODEL_NAME" ./helm_chart/demo -n "$MODEL_NAME" --create-namespace --values "values-${MODEL_NAME}.yaml" --atomic --timeout 10m

rm "values-$MODEL_NAME.yaml"

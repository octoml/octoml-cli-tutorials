apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Chart.Name }}
  name: {{ .Chart.Name }} 
  namespace: {{ .Chart.Name }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Chart.Name }}
    spec:
      containers:
      - command:
        - tritonserver
        args:
        - --model-repository=octoml/models
        - --strict-model-config=false
        image: "{{ .Values.image.repository }}/{{ .Values.image.tag }}"
        imagePullPolicy: Always
        name: {{ .Chart.Name }}
        ports:
        - containerPort: {{ .Values.ports.grpc }}
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: regcred
      nodeSelector:
        octoml.ai/octomizer-platform: {{ .Values.platform }}
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        key: octoml.ai/octomizer-platform
        operator: Equal
        value: {{ .Values.platform }}
